server.port=9090

# Available profiles:

# token-endpoint-config
#   -> validates the Bearer token against the /oauth/check_token endpoint of the authorization server
#   -> this requires the authorization server to be running

# token-store-config
#   -> validates the Bearer token by checking the common database (where the authorization server saves the tokens)
#   -> before activating this profile, check that the means that the authorization server also uses a JdbcTokenStore
#       in the AuthServerConfig

# jwt-symmetric-key-token-store
#   -> make sure the same key is used in the authorization and resource servers

# jwt-asymmetric-key-token-store
#   ->


spring.profiles.active=jwt-asymmetric-key-token-store


# Had to use a discriminator, similar to a profile
# If multiple profiles are on a class, and if one of them matches the active one,
# the class would be picked up. Basically, it's an OR
# I needed an AND type of profile configuration

# with-spring-security-oauth
#   -> this profile uses the @EnableResourceServer and relies more on the framework's autoconfiguration capabilities

# no-spring-security-oauth
#   -> without the @EnableResourceServer

configuration.mode=with-spring-security-oauth